@model TB_EMPLEADO

@{
    ViewBag.Title = "CrearEmpleado";
}

<h2>Nuevo Empleado</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <label class="control-label col-md-2">Nombre</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.NOM_EMP, new { htmlAttributes = new { @class = "form-control", @id = "idNombre", @required = "required",
                    @maxlength = "50", @pattern = ".*[^ ].*", @oninvalid = "setMessage(this,'minimo')", @onchange = "setMessage(this,'reset')" } })
                @Html.ValidationMessageFor(model => model.NOM_EMP, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Apellido</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.APE_EMP, new { htmlAttributes = new { @class = "form-control", @id = "idApellido", @required = "required",
                    @maxlength = "50", @pattern = ".*[^ ].*", @oninvalid = "setMessage(this,'minimo')", @onchange = "setMessage(this,'reset')" } })
                @Html.ValidationMessageFor(model => model.APE_EMP, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Tipo de Documento</label>
            <div class="col-md-10">
                @Html.DropDownList("COD_TIPO_DOC", (SelectList)ViewBag.TiposDoc, htmlAttributes: new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Número de Documento</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.NUM_DOC, new { htmlAttributes = new { @class = "form-control", @id = "idNumDoc", @required = "required",
                    @maxlength = "30", @minlength = "6", @pattern = @"[^\s]+", @oninvalid = "setMessage(this,'espacios')", @onchange = "setMessage(this,'reset')" } })
                @Html.ValidationMessageFor(model => model.NUM_DOC, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Tipo de Empleado</label>
            <div class="col-md-10">
                @Html.DropDownList("COD_TIPO_EMP", (SelectList)ViewBag.TiposEmp, htmlAttributes: new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Fecha de Nacimiento</label>
            <div class="col-md-10">
                <input type="datetime" class="form-control" id="idFecNac" name="FEC_NAC" readonly="readonly" style="background-color:white" />
                @Html.ValidationMessageFor(model => model.FEC_NAC, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Fecha de Contratación</label>
            <div class="col-md-10">
                <input type="datetime" class="form-control" id="idFecCon" name="FEC_CONTRATO" readonly="readonly" style="background-color:white" />
                @Html.ValidationMessageFor(model => model.FEC_CONTRATO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Teléfono</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.TELEFONO, new { htmlAttributes = new { @class = "form-control", @id = "idTelefono", @required = "required",
                    @maxlength = "30", @minlength = "6", @pattern = "[0-9]+", @oninvalid = "setMessage(this,'numeros')", @onchange = "setMessage(this,'reset')" } })
                @Html.ValidationMessageFor(model => model.TELEFONO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Dirección</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.DIRECCION, new { htmlAttributes = new { @class = "form-control", @id = "idDireccion", @required = "required",
                    @maxlength = "50", @pattern = ".*[^ ].*", @oninvalid = "setMessage(this,'minimo')", @onchange = "setMessage(this,'reset')" } })
                @Html.ValidationMessageFor(model => model.DIRECCION, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Sede</label>
            <div class="col-md-10">
                @Html.DropDownList("COD_SEDE", (SelectList)ViewBag.Sedes, htmlAttributes: new { @class = "form-control" })
            </div>
        </div>
        <br />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Registrar Empleado" onclick="return validarDatosCreaEmp()" class="btn btn-primary" />
            </div>
        </div>
    </div>
}
<br />
<div>
    @Html.ActionLink("Salir", "PaginaPrincipal")
</div>

@section Scripts {
    
<script type="text/javascript">

    if ('@ViewBag.mensaje' != "") {
        alert('@ViewBag.mensaje');
    }


    $(document).ready(function () {
        $('input[type=datetime]').datepicker({
            dateFormat: "dd/mm/yy",
            maxDate: "+1m",
            changeMonth: true,
            changeYear: true
        });
    });

    function setMessage(tag, tipo) {

        var tagval = tag.value;

        switch (tipo) {
            default:
                try { tag.setCustomValidity('') }
                catch (e) { }
                break;

            case "minimo":
                if (tagval.trim().length == 0)
                    tag.setCustomValidity('Ingresar por lo menos un caracter');
                break;

            case "espacios":
                if (tagval.includes(" "))
                    tag.setCustomValidity('No usar espacios');
                break;

            case "numeros":
                if (isNaN(tagval) || tagval.includes(" "))
                    tag.setCustomValidity('Usar solo caracteres numéricos sin espacios');
                break;
        }
    }

</script>
}
